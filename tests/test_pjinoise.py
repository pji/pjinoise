"""
test_pjinoise
~~~~~~~~~~~~~

Unit tests for the core image generation of the pjinoise module.
"""
import unittest as ut

import numpy as np

from pjinoise import filters as f
from pjinoise import pjinoise as pn
from pjinoise import sources as s
from pjinoise.constants import X, Y, Z


# Utility classes and functions.
def slice_array(a, new_shape):
    begin = [(o - n) // 2 for o, n in zip(a.shape, new_shape)]
    end = [b + n for b, n in zip(begin, new_shape)]
    slices = tuple(slice(b, e) for b, e in zip(begin, end))
    return a[slices]


class Filter(f.ForLayer):
    amount = .5
    
    def preprocess(self, size, original_size):
        return [size[Z], size[Y] + 2, size[X] + 2,]
    
    def process(self, a):
        return a * self.amount
    
    def postprocess(self, size):
        new_size = [size[Z], size[Y] - 2, size[X] - 2]
        return new_size


class Source(s.ValueSource):
    def __init__(self, *args, **kwargs) -> None:
        self.image = np.array([
            [
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
            ],
            [
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
                [0x00, 0x40, 0x80, 0xc0, 0xff,],
            ],
        ]).astype(int)
        self.scale = 0xff
        self.size = self.image.shape
    
    def fill(self, size, loc, *args, **kwargs):
        a = self.image.astype(float) / self.scale
        if loc:
            for axis in X, Y, Z:
                a = np.roll(a, loc[axis], axis=axis)
        if size != self.size:
            a = slice_array(a, size)
        return a


# Test cases.
class LayerTestCase(ut.TestCase):
    def test_create_image_data_from_valuesource(self):
        """Given a ValueSource and a size, produce an amount of image 
        data equal to size from the given location within the source.
        """
        # Set up data for expected values.
        src = Source()
        
        # Expected values.
        exp = src.image.tolist()
        
        # Set up test data and state.
        size = src.size
        
        # Run test.
        result = pn.render_source(src, size)
        
        # Extract actual data from the test.
        a = np.around(result * src.scale).astype(int)
        act = a.tolist()
        
        # Determine if test passed.
        self.assertListEqual(exp, act)
    
    def test_create_image_data_with_location(self):
        """If a location is given, the image data should be offset 
        by that location when generated by the ValueSource.
        """
        # Expected values.
        exp = [
            [
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
            ],
            [
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
                [0x40, 0x80, 0xc0, 0xff, 0x00],
            ],
        ]
        
        # Set up test data and state.
        src = Source()
        size = src.size
        location = [0, 0, -1]
        
        # Run test.
        result = pn.render_source(src, size, location)
        
        # Extract actual data from the test.
        a = np.around(result * src.scale).astype(int)
        act = a.tolist()
        
        # Determine if test passed.
        self.assertListEqual(exp, act)

    
    def test_create_image_data_with_filters(self):
        """If a list of filters are given, run those filters on the 
        image data generated by the ValueSource.
        """
        # Expected data.
        exp = [
            [
                [0x20, 0x40, 0x60,],
                [0x20, 0x40, 0x60,],
                [0x20, 0x40, 0x60,],
            ],
            [
                [0x20, 0x40, 0x60,],
                [0x20, 0x40, 0x60,],
                [0x20, 0x40, 0x60,],
            ],
        ]
        
        # Set up test data and state.
        src = Source()
        filters = [Filter(),]
        size = [2, 3, 3]
        location = [0, 1, 1]
        
        # Run test.
        result = pn.render_source(src, size, location, filters)
        
        # Extract actual data from the test.
        a = np.around(result * src.scale).astype(int)
        act = a.tolist()
        
        # Determine if test passed.
        self.assertListEqual(exp, act)
